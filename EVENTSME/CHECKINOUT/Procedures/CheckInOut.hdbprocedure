PROCEDURE "EVENTSME"."EVENTSME.CHECKINOUT.Procedures::CheckInOut" (
    IN intab "EVENTSME.DBARTIFCT::EntityAndTypes.tt_inout" ,
    OUT ex_error "EVENTSME.DBARTIFCT::EntityAndTypes.tt_exception" 
    )
   LANGUAGE SQLSCRIPT
   SQL SECURITY INVOKER AS
   --DEFAULT SCHEMA <default_schema_name>
   
--   READS SQL DATA AS
BEGIN
   /*************************************
       Write your procedure logic 
   *************************************/
   declare lv_user Nvarchar(20);
   declare lv_count Integer;
   declare lv_count1 Integer;
   declare lv_status Nvarchar(20);

  select "user_id" into lv_user FROM :intab ;
   select count (*) into lv_count from "EVENTSME"."EVENTSME.DBARTIFCT::EntityAndTypes.EventRegistration" where "user_id" = UPPER(lv_user) and "status" = 'Approved';
   select count (*) into lv_count1 from "EVENTSME"."EVENTSME.DBARTIFCT::EntityAndTypes.UserCheckInOut"  where "user_id" = lv_user;
   if (lv_count1 = 0)
   then
      lv_status = 'blank';
   else
   select top 1 "action_perf" into lv_status from "EVENTSME"."EVENTSME.DBARTIFCT::EntityAndTypes.UserCheckInOut"  where "user_id" = UPPER(lv_user) order by "time_stamp" DESC;
   end if;
   
   IF (lv_status = 'blank' and lv_count > 0)
   THEN
   INSERT INTO "EVENTSME"."EVENTSME.DBARTIFCT::EntityAndTypes.UserCheckInOut"("user_id","time_stamp","action_perf") VALUES (UPPER(lv_user),CURRENT_TIMESTAMP,'Checked-IN');
   ELSEIF (lv_status ='Checked-IN' and lv_count > 0)
   THEN
    INSERT INTO "EVENTSME"."EVENTSME.DBARTIFCT::EntityAndTypes.UserCheckInOut"("user_id","time_stamp","action_perf") VALUES (UPPER(lv_user),CURRENT_TIMESTAMP,'Checked-OUT');
   ELSEIF (lv_status ='Checked-OUT' and lv_count > 0)
   THEN
   INSERT INTO "EVENTSME"."EVENTSME.DBARTIFCT::EntityAndTypes.UserCheckInOut"("user_id","time_stamp","action_perf") VALUES (UPPER(lv_user),CURRENT_TIMESTAMP,'Checked-IN');
   ELSE
     ex_error = SELECT 401 AS http_status_code, 
					'Unauthorized Access' AS error_message, 
					'Unauthorized Access: '|| UPPER(lv_user) AS detail from dummy;
   END IF;
   
END